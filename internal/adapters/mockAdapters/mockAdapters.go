// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/adapterInterface.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/vishnusunil243/Job-Portal-User-service/entities"
	helperstruct "github.com/vishnusunil243/Job-Portal-User-service/entities/helperstruct"
)

// MockAdapterInterface is a mock of AdapterInterface interface.
type MockAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterInterfaceMockRecorder
}

// MockAdapterInterfaceMockRecorder is the mock recorder for MockAdapterInterface.
type MockAdapterInterfaceMockRecorder struct {
	mock *MockAdapterInterface
}

// NewMockAdapterInterface creates a new mock instance.
func NewMockAdapterInterface(ctrl *gomock.Controller) *MockAdapterInterface {
	mock := &MockAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapterInterface) EXPECT() *MockAdapterInterfaceMockRecorder {
	return m.recorder
}

// AddEducation mocks base method.
func (m *MockAdapterInterface) AddEducation(req entities.Education) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEducation", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEducation indicates an expected call of AddEducation.
func (mr *MockAdapterInterfaceMockRecorder) AddEducation(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEducation", reflect.TypeOf((*MockAdapterInterface)(nil).AddEducation), req)
}

// AddExperience mocks base method.
func (m *MockAdapterInterface) AddExperience(userId, experience string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExperience", userId, experience)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExperience indicates an expected call of AddExperience.
func (mr *MockAdapterInterfaceMockRecorder) AddExperience(userId, experience interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExperience", reflect.TypeOf((*MockAdapterInterface)(nil).AddExperience), userId, experience)
}

// AddLink mocks base method.
func (m *MockAdapterInterface) AddLink(arg0 entities.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLink", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLink indicates an expected call of AddLink.
func (mr *MockAdapterInterfaceMockRecorder) AddLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockAdapterInterface)(nil).AddLink), arg0)
}

// AddProject mocks base method.
func (m *MockAdapterInterface) AddProject(req entities.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProject indicates an expected call of AddProject.
func (mr *MockAdapterInterfaceMockRecorder) AddProject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProject", reflect.TypeOf((*MockAdapterInterface)(nil).AddProject), req)
}

// AddToBlockList mocks base method.
func (m *MockAdapterInterface) AddToBlockList(userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlockList", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlockList indicates an expected call of AddToBlockList.
func (mr *MockAdapterInterfaceMockRecorder) AddToBlockList(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlockList", reflect.TypeOf((*MockAdapterInterface)(nil).AddToBlockList), userId)
}

// AddToShortlist mocks base method.
func (m *MockAdapterInterface) AddToShortlist(req entities.Shortlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToShortlist", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToShortlist indicates an expected call of AddToShortlist.
func (mr *MockAdapterInterfaceMockRecorder) AddToShortlist(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToShortlist", reflect.TypeOf((*MockAdapterInterface)(nil).AddToShortlist), req)
}

// AdminAddCategory mocks base method.
func (m *MockAdapterInterface) AdminAddCategory(arg0 entities.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminAddCategory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminAddCategory indicates an expected call of AdminAddCategory.
func (mr *MockAdapterInterfaceMockRecorder) AdminAddCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminAddCategory", reflect.TypeOf((*MockAdapterInterface)(nil).AdminAddCategory), arg0)
}

// AdminAddSkill mocks base method.
func (m *MockAdapterInterface) AdminAddSkill(arg0 entities.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminAddSkill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminAddSkill indicates an expected call of AdminAddSkill.
func (mr *MockAdapterInterfaceMockRecorder) AdminAddSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminAddSkill", reflect.TypeOf((*MockAdapterInterface)(nil).AdminAddSkill), arg0)
}

// AdminGetAllSkills mocks base method.
func (m *MockAdapterInterface) AdminGetAllSkills() ([]helperstruct.SkillHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAllSkills")
	ret0, _ := ret[0].([]helperstruct.SkillHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAllSkills indicates an expected call of AdminGetAllSkills.
func (mr *MockAdapterInterfaceMockRecorder) AdminGetAllSkills() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAllSkills", reflect.TypeOf((*MockAdapterInterface)(nil).AdminGetAllSkills))
}

// AdminUpdateCategory mocks base method.
func (m *MockAdapterInterface) AdminUpdateCategory(arg0 entities.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateCategory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminUpdateCategory indicates an expected call of AdminUpdateCategory.
func (mr *MockAdapterInterfaceMockRecorder) AdminUpdateCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateCategory", reflect.TypeOf((*MockAdapterInterface)(nil).AdminUpdateCategory), arg0)
}

// AdminUpdateSkill mocks base method.
func (m *MockAdapterInterface) AdminUpdateSkill(arg0 entities.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateSkill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminUpdateSkill indicates an expected call of AdminUpdateSkill.
func (mr *MockAdapterInterfaceMockRecorder) AdminUpdateSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateSkill", reflect.TypeOf((*MockAdapterInterface)(nil).AdminUpdateSkill), arg0)
}

// CreateProfile mocks base method.
func (m *MockAdapterInterface) CreateProfile(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockAdapterInterfaceMockRecorder) CreateProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockAdapterInterface)(nil).CreateProfile), userID)
}

// DeleteEducation mocks base method.
func (m *MockAdapterInterface) DeleteEducation(edId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEducation", edId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEducation indicates an expected call of DeleteEducation.
func (mr *MockAdapterInterfaceMockRecorder) DeleteEducation(edId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEducation", reflect.TypeOf((*MockAdapterInterface)(nil).DeleteEducation), edId)
}

// DeleteLink mocks base method.
func (m *MockAdapterInterface) DeleteLink(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLink", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLink indicates an expected call of DeleteLink.
func (mr *MockAdapterInterfaceMockRecorder) DeleteLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLink", reflect.TypeOf((*MockAdapterInterface)(nil).DeleteLink), arg0)
}

// DeleteProject mocks base method.
func (m *MockAdapterInterface) DeleteProject(projectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockAdapterInterfaceMockRecorder) DeleteProject(projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockAdapterInterface)(nil).DeleteProject), projectId)
}

// EditEducation mocks base method.
func (m *MockAdapterInterface) EditEducation(req entities.Education) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditEducation", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditEducation indicates an expected call of EditEducation.
func (mr *MockAdapterInterfaceMockRecorder) EditEducation(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEducation", reflect.TypeOf((*MockAdapterInterface)(nil).EditEducation), req)
}

// EditProject mocks base method.
func (m *MockAdapterInterface) EditProject(req entities.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProject indicates an expected call of EditProject.
func (mr *MockAdapterInterfaceMockRecorder) EditProject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProject", reflect.TypeOf((*MockAdapterInterface)(nil).EditProject), req)
}

// GetAddressByProfileId mocks base method.
func (m *MockAdapterInterface) GetAddressByProfileId(profileId string) (entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByProfileId", profileId)
	ret0, _ := ret[0].(entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByProfileId indicates an expected call of GetAddressByProfileId.
func (mr *MockAdapterInterfaceMockRecorder) GetAddressByProfileId(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByProfileId", reflect.TypeOf((*MockAdapterInterface)(nil).GetAddressByProfileId), profileId)
}

// GetAdminByEmail mocks base method.
func (m *MockAdapterInterface) GetAdminByEmail(email string) (entities.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByEmail", email)
	ret0, _ := ret[0].(entities.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByEmail indicates an expected call of GetAdminByEmail.
func (mr *MockAdapterInterfaceMockRecorder) GetAdminByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByEmail", reflect.TypeOf((*MockAdapterInterface)(nil).GetAdminByEmail), email)
}

// GetAllCategory mocks base method.
func (m *MockAdapterInterface) GetAllCategory() ([]entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategory")
	ret0, _ := ret[0].([]entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategory indicates an expected call of GetAllCategory.
func (mr *MockAdapterInterfaceMockRecorder) GetAllCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategory", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllCategory))
}

// GetAllLinksUser mocks base method.
func (m *MockAdapterInterface) GetAllLinksUser(profileID string) ([]entities.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLinksUser", profileID)
	ret0, _ := ret[0].([]entities.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLinksUser indicates an expected call of GetAllLinksUser.
func (mr *MockAdapterInterfaceMockRecorder) GetAllLinksUser(profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLinksUser", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllLinksUser), profileID)
}

// GetAllProjects mocks base method.
func (m *MockAdapterInterface) GetAllProjects(userId string) ([]entities.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects", userId)
	ret0, _ := ret[0].([]entities.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects.
func (mr *MockAdapterInterfaceMockRecorder) GetAllProjects(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllProjects), userId)
}

// GetAppliedJob mocks base method.
func (m *MockAdapterInterface) GetAppliedJob(arg0, arg1 string) (entities.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedJob", arg0, arg1)
	ret0, _ := ret[0].(entities.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedJob indicates an expected call of GetAppliedJob.
func (mr *MockAdapterInterfaceMockRecorder) GetAppliedJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedJob", reflect.TypeOf((*MockAdapterInterface)(nil).GetAppliedJob), arg0, arg1)
}

// GetAppliedJobs mocks base method.
func (m *MockAdapterInterface) GetAppliedJobs(arg0 string) ([]helperstruct.JobHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedJobs", arg0)
	ret0, _ := ret[0].([]helperstruct.JobHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedJobs indicates an expected call of GetAppliedJobs.
func (mr *MockAdapterInterfaceMockRecorder) GetAppliedJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedJobs", reflect.TypeOf((*MockAdapterInterface)(nil).GetAppliedJobs), arg0)
}

// GetAppliedUsersByJobId mocks base method.
func (m *MockAdapterInterface) GetAppliedUsersByJobId(jobId string) ([]entities.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedUsersByJobId", jobId)
	ret0, _ := ret[0].([]entities.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedUsersByJobId indicates an expected call of GetAppliedUsersByJobId.
func (mr *MockAdapterInterfaceMockRecorder) GetAppliedUsersByJobId(jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedUsersByJobId", reflect.TypeOf((*MockAdapterInterface)(nil).GetAppliedUsersByJobId), jobId)
}

// GetCategoryById mocks base method.
func (m *MockAdapterInterface) GetCategoryById(id int) (entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryById", id)
	ret0, _ := ret[0].(entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryById indicates an expected call of GetCategoryById.
func (mr *MockAdapterInterfaceMockRecorder) GetCategoryById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryById", reflect.TypeOf((*MockAdapterInterface)(nil).GetCategoryById), id)
}

// GetCategoryByName mocks base method.
func (m *MockAdapterInterface) GetCategoryByName(category string) (entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", category)
	ret0, _ := ret[0].(entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockAdapterInterfaceMockRecorder) GetCategoryByName(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockAdapterInterface)(nil).GetCategoryByName), category)
}

// GetEducation mocks base method.
func (m *MockAdapterInterface) GetEducation(userId string) ([]entities.Education, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEducation", userId)
	ret0, _ := ret[0].([]entities.Education)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEducation indicates an expected call of GetEducation.
func (mr *MockAdapterInterfaceMockRecorder) GetEducation(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEducation", reflect.TypeOf((*MockAdapterInterface)(nil).GetEducation), userId)
}

// GetExperience mocks base method.
func (m *MockAdapterInterface) GetExperience(userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperience", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperience indicates an expected call of GetExperience.
func (mr *MockAdapterInterfaceMockRecorder) GetExperience(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperience", reflect.TypeOf((*MockAdapterInterface)(nil).GetExperience), userId)
}

// GetInterview mocks base method.
func (m *MockAdapterInterface) GetInterview(userId, jobId string) (entities.Shortlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterview", userId, jobId)
	ret0, _ := ret[0].(entities.Shortlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterview indicates an expected call of GetInterview.
func (mr *MockAdapterInterfaceMockRecorder) GetInterview(userId, jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterview", reflect.TypeOf((*MockAdapterInterface)(nil).GetInterview), userId, jobId)
}

// GetInterviewsForUser mocks base method.
func (m *MockAdapterInterface) GetInterviewsForUser(userId string) ([]entities.Shortlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewsForUser", userId)
	ret0, _ := ret[0].([]entities.Shortlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewsForUser indicates an expected call of GetInterviewsForUser.
func (mr *MockAdapterInterfaceMockRecorder) GetInterviewsForUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewsForUser", reflect.TypeOf((*MockAdapterInterface)(nil).GetInterviewsForUser), userId)
}

// GetLinkByTitle mocks base method.
func (m *MockAdapterInterface) GetLinkByTitle(profileId, title string) (entities.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkByTitle", profileId, title)
	ret0, _ := ret[0].(entities.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkByTitle indicates an expected call of GetLinkByTitle.
func (mr *MockAdapterInterfaceMockRecorder) GetLinkByTitle(profileId, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkByTitle", reflect.TypeOf((*MockAdapterInterface)(nil).GetLinkByTitle), profileId, title)
}

// GetProfileIdByUserId mocks base method.
func (m *MockAdapterInterface) GetProfileIdByUserId(userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileIdByUserId", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileIdByUserId indicates an expected call of GetProfileIdByUserId.
func (mr *MockAdapterInterfaceMockRecorder) GetProfileIdByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileIdByUserId", reflect.TypeOf((*MockAdapterInterface)(nil).GetProfileIdByUserId), userId)
}

// GetProfilePic mocks base method.
func (m *MockAdapterInterface) GetProfilePic(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilePic", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePic indicates an expected call of GetProfilePic.
func (mr *MockAdapterInterfaceMockRecorder) GetProfilePic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePic", reflect.TypeOf((*MockAdapterInterface)(nil).GetProfilePic), arg0)
}

// GetShortlist mocks base method.
func (m *MockAdapterInterface) GetShortlist(jobId string) ([]entities.Shortlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortlist", jobId)
	ret0, _ := ret[0].([]entities.Shortlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortlist indicates an expected call of GetShortlist.
func (mr *MockAdapterInterfaceMockRecorder) GetShortlist(jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortlist", reflect.TypeOf((*MockAdapterInterface)(nil).GetShortlist), jobId)
}

// GetShortlistByUserIdAndJobId mocks base method.
func (m *MockAdapterInterface) GetShortlistByUserIdAndJobId(userId, jobId string) (entities.Shortlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortlistByUserIdAndJobId", userId, jobId)
	ret0, _ := ret[0].(entities.Shortlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortlistByUserIdAndJobId indicates an expected call of GetShortlistByUserIdAndJobId.
func (mr *MockAdapterInterfaceMockRecorder) GetShortlistByUserIdAndJobId(userId, jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortlistByUserIdAndJobId", reflect.TypeOf((*MockAdapterInterface)(nil).GetShortlistByUserIdAndJobId), userId, jobId)
}

// GetSkillById mocks base method.
func (m *MockAdapterInterface) GetSkillById(id int) (helperstruct.SkillHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillById", id)
	ret0, _ := ret[0].(helperstruct.SkillHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillById indicates an expected call of GetSkillById.
func (mr *MockAdapterInterfaceMockRecorder) GetSkillById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillById", reflect.TypeOf((*MockAdapterInterface)(nil).GetSkillById), id)
}

// GetSkillByName mocks base method.
func (m *MockAdapterInterface) GetSkillByName(skill string) (entities.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillByName", skill)
	ret0, _ := ret[0].(entities.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillByName indicates an expected call of GetSkillByName.
func (mr *MockAdapterInterfaceMockRecorder) GetSkillByName(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillByName", reflect.TypeOf((*MockAdapterInterface)(nil).GetSkillByName), skill)
}

// GetUserByEmail mocks base method.
func (m *MockAdapterInterface) GetUserByEmail(email string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAdapterInterfaceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockAdapterInterface) GetUserById(userId string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockAdapterInterfaceMockRecorder) GetUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserById), userId)
}

// GetUserByPhone mocks base method.
func (m *MockAdapterInterface) GetUserByPhone(phone string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", phone)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockAdapterInterfaceMockRecorder) GetUserByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserByPhone), phone)
}

// GetUserSkillById mocks base method.
func (m *MockAdapterInterface) GetUserSkillById(arg0 string, arg1 int) (entities.UserSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSkillById", arg0, arg1)
	ret0, _ := ret[0].(entities.UserSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSkillById indicates an expected call of GetUserSkillById.
func (mr *MockAdapterInterfaceMockRecorder) GetUserSkillById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSkillById", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserSkillById), arg0, arg1)
}

// GetWeightage mocks base method.
func (m *MockAdapterInterface) GetWeightage(userId, jobId string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeightage", userId, jobId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeightage indicates an expected call of GetWeightage.
func (mr *MockAdapterInterfaceMockRecorder) GetWeightage(userId, jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeightage", reflect.TypeOf((*MockAdapterInterface)(nil).GetWeightage), userId, jobId)
}

// HireUser mocks base method.
func (m *MockAdapterInterface) HireUser(userId, jobId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HireUser", userId, jobId)
	ret0, _ := ret[0].(error)
	return ret0
}

// HireUser indicates an expected call of HireUser.
func (mr *MockAdapterInterfaceMockRecorder) HireUser(userId, jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HireUser", reflect.TypeOf((*MockAdapterInterface)(nil).HireUser), userId, jobId)
}

// InterviewSchedule mocks base method.
func (m *MockAdapterInterface) InterviewSchedule(userId, jobId, roomId string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterviewSchedule", userId, jobId, roomId, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// InterviewSchedule indicates an expected call of InterviewSchedule.
func (mr *MockAdapterInterfaceMockRecorder) InterviewSchedule(userId, jobId, roomId, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterviewSchedule", reflect.TypeOf((*MockAdapterInterface)(nil).InterviewSchedule), userId, jobId, roomId, date)
}

// JobApply mocks base method.
func (m *MockAdapterInterface) JobApply(arg0 entities.Jobs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobApply", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// JobApply indicates an expected call of JobApply.
func (mr *MockAdapterInterfaceMockRecorder) JobApply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobApply", reflect.TypeOf((*MockAdapterInterface)(nil).JobApply), arg0)
}

// RemoveFromBlockList mocks base method.
func (m *MockAdapterInterface) RemoveFromBlockList(userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBlockList", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromBlockList indicates an expected call of RemoveFromBlockList.
func (mr *MockAdapterInterfaceMockRecorder) RemoveFromBlockList(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBlockList", reflect.TypeOf((*MockAdapterInterface)(nil).RemoveFromBlockList), userId)
}

// ReportUser mocks base method.
func (m *MockAdapterInterface) ReportUser(userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportUser", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportUser indicates an expected call of ReportUser.
func (mr *MockAdapterInterfaceMockRecorder) ReportUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUser", reflect.TypeOf((*MockAdapterInterface)(nil).ReportUser), userId)
}

// UpdateAppliedJobStatus mocks base method.
func (m *MockAdapterInterface) UpdateAppliedJobStatus(statusId int, jobId, userId string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppliedJobStatus", statusId, jobId, userId, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppliedJobStatus indicates an expected call of UpdateAppliedJobStatus.
func (mr *MockAdapterInterfaceMockRecorder) UpdateAppliedJobStatus(statusId, jobId, userId, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppliedJobStatus", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateAppliedJobStatus), statusId, jobId, userId, date)
}

// UpdateProjectImage mocks base method.
func (m *MockAdapterInterface) UpdateProjectImage(image, projectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectImage", image, projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectImage indicates an expected call of UpdateProjectImage.
func (mr *MockAdapterInterfaceMockRecorder) UpdateProjectImage(image, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectImage", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateProjectImage), image, projectId)
}

// UpdateSubscription mocks base method.
func (m *MockAdapterInterface) UpdateSubscription(userId string, subscribed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", userId, subscribed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockAdapterInterfaceMockRecorder) UpdateSubscription(userId, subscribed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateSubscription), userId, subscribed)
}

// UploadProfileImage mocks base method.
func (m *MockAdapterInterface) UploadProfileImage(Image, ProfileId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProfileImage", Image, ProfileId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProfileImage indicates an expected call of UploadProfileImage.
func (mr *MockAdapterInterfaceMockRecorder) UploadProfileImage(Image, ProfileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfileImage", reflect.TypeOf((*MockAdapterInterface)(nil).UploadProfileImage), Image, ProfileId)
}

// UserAddAddress mocks base method.
func (m *MockAdapterInterface) UserAddAddress(arg0 entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAddAddress indicates an expected call of UserAddAddress.
func (mr *MockAdapterInterfaceMockRecorder) UserAddAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddAddress", reflect.TypeOf((*MockAdapterInterface)(nil).UserAddAddress), arg0)
}

// UserAddSkill mocks base method.
func (m *MockAdapterInterface) UserAddSkill(arg0 entities.UserSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddSkill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAddSkill indicates an expected call of UserAddSkill.
func (mr *MockAdapterInterfaceMockRecorder) UserAddSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddSkill", reflect.TypeOf((*MockAdapterInterface)(nil).UserAddSkill), arg0)
}

// UserDeleteSkill mocks base method.
func (m *MockAdapterInterface) UserDeleteSkill(arg0 entities.UserSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteSkill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDeleteSkill indicates an expected call of UserDeleteSkill.
func (mr *MockAdapterInterfaceMockRecorder) UserDeleteSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteSkill", reflect.TypeOf((*MockAdapterInterface)(nil).UserDeleteSkill), arg0)
}

// UserEditAddress mocks base method.
func (m *MockAdapterInterface) UserEditAddress(arg0 entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserEditAddress indicates an expected call of UserEditAddress.
func (mr *MockAdapterInterfaceMockRecorder) UserEditAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditAddress", reflect.TypeOf((*MockAdapterInterface)(nil).UserEditAddress), arg0)
}

// UserEditName mocks base method.
func (m *MockAdapterInterface) UserEditName(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditName", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserEditName indicates an expected call of UserEditName.
func (mr *MockAdapterInterfaceMockRecorder) UserEditName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditName", reflect.TypeOf((*MockAdapterInterface)(nil).UserEditName), arg0)
}

// UserEditPhone mocks base method.
func (m *MockAdapterInterface) UserEditPhone(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditPhone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserEditPhone indicates an expected call of UserEditPhone.
func (mr *MockAdapterInterfaceMockRecorder) UserEditPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditPhone", reflect.TypeOf((*MockAdapterInterface)(nil).UserEditPhone), arg0)
}

// UserGetAllSkills mocks base method.
func (m *MockAdapterInterface) UserGetAllSkills(profileId string) ([]helperstruct.SkillHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetAllSkills", profileId)
	ret0, _ := ret[0].([]helperstruct.SkillHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetAllSkills indicates an expected call of UserGetAllSkills.
func (mr *MockAdapterInterfaceMockRecorder) UserGetAllSkills(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetAllSkills", reflect.TypeOf((*MockAdapterInterface)(nil).UserGetAllSkills), profileId)
}

// UserSignup mocks base method.
func (m *MockAdapterInterface) UserSignup(arg0 entities.User) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", arg0)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockAdapterInterfaceMockRecorder) UserSignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockAdapterInterface)(nil).UserSignup), arg0)
}
